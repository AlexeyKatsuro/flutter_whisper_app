# Sizzle Starter Flutter Project Rules

## General Instructions
- NEVER create or modify any files before examining relevant rules in `.cursor/rules/`
- Follow the Sizzle Starter template architecture patterns religiously
- Use the modular workspace structure with app/, core/, and feature/ directories

## Code Quality Standards
- Use 100-character line length for all Dart code
- Follow sizzle_lints package rules strictly
- Use Freezed for immutable data patterns (see freezed_patterns.mdc for details)
- Use BLoC for state management with sequential event processing
- Apply dependency injection through composition root pattern

## Architecture Enforcement
- New features MUST follow Clean Architecture layers (domain/data/application/presentation)
- All features MUST be separate packages with proper dependency injection
- Use Freezed sealed classes for events and states in BLoC implementations
- Preserve data across state transitions to avoid unnecessary rebuilds
- Handle errors gracefully with proper exception hierarchies
- Generate code using `bash scripts/bootstrap.bash` after model changes

## Development Workflow
- Check `.cursor/rules/` directory for specific patterns before coding
- Refer to architecture.mdc for dependency management patterns
- Follow feature_development.mdc for new feature creation
- Apply style.mdc for naming conventions and code organization
- Use bloc_patterns.mdc for state management implementation
- Use freezed_patterns.mdc for data class and code generation patterns

## File Organization
- Use snake_case for file and directory names
- Place implementation details in src/ directories
- Export public APIs through single library files
- Follow the established project structure religiously

## Commit Message Standards
- Follow Conventional Commits specification (https://www.conventionalcommits.org/en/v1.0.0/)
- Use format: <type>[optional scope]: <description>
- Common types: feat, fix, docs, style, refactor, test, chore, build, ci, perf, revert
- Use imperative mood in subject line (e.g., "add feature" not "added feature")
- Capitalize first letter of description
- No period at end of subject line
- Add BREAKING CHANGE: footer or ! after type for breaking changes
- Keep subject line under 50 characters when possible
- Use body to explain what and why, not how
